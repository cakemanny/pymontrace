In priority order:

- [x] Add <3.12 support
- [x] Support targets in Linux containers
      (We'll need to keep coming back to this as we progress through the
       next two items)
- [x] Tracer / tracee communication. i.e. the tool should be there primarily
      for observing behaviour. Want to see it in pymontrace stdout.
- [x] Trace target which has not had pymontrace already pip installed.
- [x] Make darwin attach signal handling race-free
- [x] Make linux attach code signal resistant
- [o] Clean up C code (specific TODOs are within)
- [x] Handle target process + target thread ending cleanly.
- [ ] Add command to list probes (maybe `sys.modules` can help)
- [x] Use Py_AddPendingCall on Darwin too
- [x] Add veneer around PyRun_SimpleString so that we
      1. don't crash the interpreter on error
      2. know whether there was an error (trap after call)

- [o] multithreaded processes on linux

- [o] Linux: Handle new threads being created. (shows up as clone(2))
- [o] Linux: Handle forks during attach
      (done but ought to have a refactor)
- [ ] Make attach_and_execute re-entrant.
      We could use thread local storage. On darwin, the returning of the
      error code may be hard, since it uses two threads.
- [ ] Darwin: look into mach_notify_no_senders or mach_notify_port_deleted ...
      for closing things down better.
- [x] Install SIGINT handler instead of catching KeyboardInterrupt

- [o] Factor code into tracer and tracee parts
- [ ] add a -w 'unsafe' flag, and then make the default mode safe

- [ ] Trace many targets at once. Main need: trace forking servers.

- [ ] Firm up the language / interface.
      - [x] Create buffer spaces to support aggregations?
      - [x] multiple probes
      - [ ] per-thread/per-context storage to store some amount of data.
- [x] func probes (entry, exit, exception, yield, unwind, resume, ...)

- [x] our own signal handlers, to be able to sneak out maps as the program
      is about to end...?
      (we preshare the maps and store them out of process)
- [ ] change the trace buffers so the tracer controls the buffer switch
      (and reuse the aggregation buffer implementation)
- [ ] change the communication socket to use dgram and simply send/receive
      code
      - no more need for locking
      - change send to be non-blocking?

- [ ] Interval probes (probably using setitimer)
- [ ] https://docs.python.org/3.14/howto/remote_debugging.html#remote-debugging
- [ ] Support FreeBSD + jails , Illumos + zones, ...
- [ ] musl support on Linux ...
- [ ] Rewrite the C code in Rust?
