name: Test

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "master" ]

jobs:

  check:
    if: false  # XXX
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: sudo make check

  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: [
          # "3.9", "3.10", "3.11",
          "3.12", "3.13"]
        runner: [
          #"macos-13", "macos-latest", "ubuntu-latest",
          "ubuntu-24.04-arm"]

    runs-on: ${{ matrix.runner }}

    # Pymontrace does not work on macOS with a Python installed
    # in /Library/Frameworks/Python.framework, and especially not the
    # the codesigned universal binaries from python.org. So we use homebrew
    # on macOS instead.
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      if: ${{ ! startsWith(matrix.runner, 'macos-') }}
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Python ${{ matrix.python-version }}
      if: ${{ startsWith(matrix.runner, 'macos-') }}
      # The github hosted runners seem to come with certain system python
      # version installed and linked into the brew cellar, so we must use
      # brew reinstall.
      run: |
        brew uninstall -f --ignore-dependencies python@${{ matrix.python-version }}
        brew install --overwrite python@${{ matrix.python-version }}
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
    - name: Print Versions
      run: |
        uname -a
        python${{ matrix.python-version }} -VV
        file "$( which python${{ matrix.python-version }} )"
        uv --version
    - name: Create virtualenv
      run: |
        python${{ matrix.python-version }} -m venv .venv

    - name: Install dependencies
      env:
        PYMONTRACE_DEBUG: ${{ runner.debug && '1' || '' }}
      run: |
        source .venv/bin/activate
        uv pip install -e '.[test]' pyright
    - name: Lint with flake8
      run: |
        source .venv/bin/activate
        flake8 src --count --show-source --statistics

    - name: Typecheck with Pyright
      run: |
        source .venv/bin/activate
        pyright src

    - name: Test with pytest
      timeout-minutes: 1
      env:
        PYTEST_ADDOPTS: ${{ runner.debug && '-vv -s' || '' }}
      run: |
        source .venv/bin/activate
        ulimit -c unlimited
        if [[ $(uname) == "Darwin" ]]; then
          sudo pytest -v --color=yes
        else
          for _ in {1..5}; do
            timeout --signal=ABRT 10s pytest -v --color=yes -s
          done
        fi

    - name: Run Integration tests
      run: |
        source .venv/bin/activate
        ulimit -c unlimited
        if [[ $(uname) == "Darwin" ]]; then
          sudo pytest integration_tests
        else
          pytest integration_tests
        fi

    - if: ${{ env.ACT == 'true' }}
      name: Install gdb and systemd-coredump
      run: |
        sudo apt-get update
        sudo apt-get install -y systemd-coredump

    - name: Check for core files
      if: always()
      run: |
        # macOS
        if [ -d /cores/ ]; then
          find /cores -type f -print0 | xargs -0 -r lldb --batch -o 'backtrace' -c
        fi
        # Linux
        test -d /proc && cat /proc/sys/kernel/core_pattern
        if [ -d /var/lib/systemd/coredump/ ]; then
          find /var/lib/systemd/coredump/ -type f
          if coredumpctl list; then
            coredumpctl -1 info
            # [ "$RUNNER_DEBUG" = 1 ] &&  # XXX
            if coredumpctl -1 info | grep -q os_abort_impl; then
              :
            else
              coredumpctl -1 dump --output=core
            fi
          fi
        fi
        if [ -f core ]; then
          if [ "$RUNNER_DEBUG" = 1 ] || true; then  # XXX
            echo "::group::Install gdb"
            sudo apt-get update && sudo apt-get install -y gdb
            echo "::endgroup::"
            gdb --batch -ex 'backtrace' "$( which python${{ matrix.python-version }} )" core
          else
            echo "$(tput setaf 6)Rerun the workflow with debugging enabled" \
                 "to dump the stacktrace with gdb $(tput sgr0)"
          fi
        fi
