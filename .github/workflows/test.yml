name: Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: sudo make check

  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        runner: ["macos-13", "macos-latest", "ubuntu-latest"]
        include:
          # pymontrace doesn' work on macOS with the python3.13 that brew
          # installs. (nor is 3.13 on macos-13 as at writing).
          - python-version: "3.13"
            runner: "ubuntu-latest"

    runs-on: ${{ matrix.runner }}

    # Pymontrace does not work on macOS with a Python installed
    # in /Library/Frameworks/Python.framework, and especially not the
    # the codesigned universal binaries from python.org. So we use homebrew
    # on macOS instead.
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      if: ${{ ! startsWith(matrix.runner, 'macos-') }}
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Python ${{ matrix.python-version }}
      if: ${{ startsWith(matrix.runner, 'macos-') }}
      # The github hosted runners seem to come with certain system python
      # version installed and linked into the brew cellar, so we must use
      # brew reinstall.
      run: |
        brew uninstall -f --ignore-dependencies python@${{ matrix.python-version }}
        brew install --overwrite python@${{ matrix.python-version }}
    - name: Print Versions
      run: |
        uname -a
        python${{ matrix.python-version }} -VV
        file $( which python${{ matrix.python-version }} )
    - name: Create virtualenv
      run: |
        python${{ matrix.python-version }} -m venv .venv
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        python3 -m pip install --upgrade pip
        python3 -m pip install -e '.[test]'
    - name: Lint with flake8
      run: |
        source .venv/bin/activate
        flake8 src --count --show-source --statistics
    - name: Test with pytest
      run: |
        source .venv/bin/activate
        ulimit -c unlimited
        if [[ $(uname) == "Darwin" ]]; then
          sudo pytest
        else
          pytest
        fi
    - name: Run Integration tests
      run: |
        source .venv/bin/activate
        ulimit -c unlimited
        if [[ $(uname) == "Darwin" ]]; then
          sudo pytest integration_tests
        else
          pytest integration_tests
        fi
    - name: Check for core files
      if: always()
      run: |
        if [ -d /cores/ ]; then
          find /cores -type f | xargs -r lldb --batch -o 'backtrace' -c
        fi
        if [ -f core ]; then
          gdb --batch -ex 'backtrace' "$(which python${{ matrix.python-version }} )" core
        fi
